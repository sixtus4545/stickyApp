{"version":3,"sources":["logo.svg","serviceWorker.js","header.js","Todo.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Header","addEventListener","this","resizeHeaderOnScroll","distanceY","pageYOffset","document","scrollTop","headerEl","getElementById","classList","add","remove","id","className","href","Component","Todo","state","color","handleChange","e","setState","target","value","style","background","setcolor","onChange","type","placeholder","onfocus","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mGAAAA,EAAOC,QAAU,IAA0B,kC,oLCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,uCCqBSC,G,kMAlCXJ,OAAOK,iBAAiB,SAAUC,KAAKC,wB,6CAGvC,IAAMC,EAAYR,OAAOS,aAAeC,SAASC,UAE/CC,EAAWF,SAASG,eAAe,aAEjCL,EAHS,IAIXI,EAASE,UAAUC,IAAI,WAEvBH,EAASE,UAAUE,OAAO,a,+BAK5B,OACE,yBAAKC,GAAG,WACN,4BAAQA,GAAG,aACT,yBAAKC,UAAU,sBACb,wBAAID,GAAG,QAAP,YACA,6BACE,uBAAGE,KAAK,aAAR,YACA,uBAAGA,KAAK,UAAR,SACA,uBAAGA,KAAK,YAAR,mB,GA1BOC,cCyDNC,E,2MAjCdC,MAAM,CACLC,MAAM,CAAC,S,EAGRC,aAAa,SAAAC,GACZ,EAAKC,SAAS,CACbH,MAAME,EAAEE,OAAOC,S,wEAIhB,OACE,6BACA,kBAAC,EAAD,MAEA,yBAAKV,UAAU,OAAOW,MAAO,CAACC,WAAWxB,KAAKgB,MAAMC,QACxD,2BAAOL,UAAU,eAAeD,GAAG,QAAQW,MAAOtB,KAAKgB,MAAMS,SAAUC,SAAU1B,KAAKkB,aAAaS,KAAK,OACvGC,YAAY,yCAAyCC,SAAO,KAG1D,yBAAKjB,UAAU,aACf,yBAAKA,UAAU,QAAQW,MAAO,CAACC,WAAWxB,KAAKgB,MAAMC,SACpD,yBAAKL,UAAU,QAAQW,MAAO,CAACC,WAAWxB,KAAKgB,MAAMC,SACpD,yBAAKL,UAAU,QAAQW,MAAO,CAACC,WAAWxB,KAAKgB,MAAMC,SACpD,yBAAKL,UAAU,QAAQW,MAAO,CAACC,WAAWxB,KAAKgB,MAAMC,SACpD,yBAAKL,UAAU,QAAQW,MAAO,CAACC,WAAWxB,KAAKgB,MAAMC,e,GAhDzCH,aCKnBgB,IAASC,OAAO,kBAAC,EAAD,MAAU3B,SAASG,eAAe,SH0H5C,kBAAmByB,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.80a5772a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React,{Component} from 'react'\nimport \"./css/styles.css\"\nclass Header extends Component{\n\n  componentDidMount() {\n    window.addEventListener(\"scroll\", this.resizeHeaderOnScroll);\n  }\n  resizeHeaderOnScroll() {\n    const distanceY = window.pageYOffset || document.scrollTop,\n      shrinkOn = 200,\n      headerEl = document.getElementById(\"js-header\");\n\n    if (distanceY > shrinkOn) {\n      headerEl.classList.add(\"smaller\");\n    } else {\n      headerEl.classList.remove(\"smaller\");\n    }\n  }\n\n  render() {\n    return (\n      <div id=\"wrapper\">\n        <header id=\"js-header\">\n          <div className=\"container clearfix\">\n            <h1 id=\"logo\">TechFlux</h1>\n            <nav>\n              <a href=\"#services\">services</a>\n              <a href=\"#about\">about</a>\n              <a href=\"#contact\">contact</a>\n            </nav>\n          </div>\n        </header>\n        </div>\n        )\n    }\n\n}\n\n\nexport default Header;","import React, { Component } from 'react';\nimport Header from './header'\nclass Todo extends Component {\n\n\t// state={\n\t// \t\ttoggle:true\n\t// \t}\n\n\t// toggle=()=>{\n\t// \tthis.setState({\n\t// \t\ttoggle:!this.state.toggle\n\t// \t})\n\t// }\n\t// render(){\n\t// \treturn (\n\t// \t\t<div>\n\t// \t\t<Welcome text=\"checking out state and setState(show text)\"/>\n\t// \t\t<h1>WELCOME </h1>\n\t// \t\t{this.state.toggle && \n\t// \t\t\t<p>this sholud show and hide</p>\n\t// \t\t}\n\t\t\t\n\t// \t\t<button onClick={this.toggle}> show / hide</button>\n\t// \t\t</div>\n\t// \t\t)\n\t// }\n\tstate={\n\t\tcolor:[\"blue\"]\n\t}\n\n\thandleChange=e=>{\n\t\tthis.setState({\n\t\t\tcolor:e.target.value\n\t\t})\n\t}\n\trender(){\n\t\treturn(\n\t\t\t\t<div>\n\t\t\t\t<Header/>\n\t\t\t\t\t\t\n\t\t\t\t<div className=\"show\" style={{background:this.state.color}}>\n<input className=\"search-input\" id=\"value\" value={this.state.setcolor} onChange={this.handleChange}type=\"text\"\n placeholder=\"input color to change background color\" onfocus/>\n\t\t\t\t</div>\n\t\t\t\n\t\t\t<div className=\"container\">\n\t\t\t<div className=\"show1\" style={{background:this.state.color}}></div>\n\t\t\t\t<div className=\"show1\" style={{background:this.state.color}}></div>\n\t\t\t\t\t<div className=\"show1\" style={{background:this.state.color}}></div>\n\t\t\t\t\t\t<div className=\"show1\" style={{background:this.state.color}}></div>\n\t\t\t\t\t\t\t<div className=\"show1\" style={{background:this.state.color}}></div>\n\n\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t)\n\t}\n}\n\n\nexport default Todo;\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Todo from './Todo'\n\nReactDOM.render(<Todo />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}